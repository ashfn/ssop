name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            arch: amd64
          - platform: linux/arm64
            runner: ubuntu-latest
            arch: arm64
          - platform: linux/arm/v7
            runner: ubuntu-latest
            arch: armv7

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          tags: ssop-test:${{ matrix.arch }}
          load: true
          cache-from: type=gha,scope=test-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=test-${{ matrix.arch }}

      - name: Create test docker-compose.yml
        run: |
          cat > docker-compose.test.yml << 'EOF'
          version: '3.8'
          services:
            ssop:
              image: ssop-test:${{ matrix.arch }}
              ports:
                - "3000:3000"
              environment:
                - PORT=3000
                - ISSUER=http://localhost:3000
                - NODE_ENV=production
                - DEBUG=""
              volumes:
                - ./users.json:/app/users.json:ro
                - ./clients.json:/app/clients.json:ro
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000/.well-known/openid-configuration"]
                interval: 10s
                timeout: 5s
                retries: 5
                start_period: 30s
          EOF

      - name: Start services
        run: docker compose -f docker-compose.test.yml up -d

      - name: Wait for healthcheck
        run: |
          echo "Waiting for service to be healthy..."
          timeout 120s bash -c 'until docker compose -f docker-compose.test.yml ps ssop | grep -q "healthy"; do sleep 5; done'
          echo "Service is healthy!"

      - name: Test OpenID configuration endpoint
        run: |
          curl -f http://localhost:3000/.well-known/openid-configuration
          echo "OpenID configuration endpoint is responding"

      - name: Test home page
        run: |
          curl -f http://localhost:3000/
          echo "Home page is responding"

      - name: Show logs on failure
        if: failure()
        run: docker compose -f docker-compose.test.yml logs

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.test.yml down -v

  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            arch: amd64
          - platform: linux/arm64
            runner: ubuntu-latest
            arch: arm64
          - platform: linux/arm/v7
            runner: ubuntu-latest
            arch: armv7

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}

      - name: Export digest
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.arch }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-*
          merge-multiple: true
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *) 